name: Build LibMultiSense

on:
  push:
    branches:
      - master
  release:
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Build on Ubuntu
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.ref_name }}-build
      cancel-in-progress: ${{ github.ref_name != 'main' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtest-dev nlohmann-json3-dev

      - name: Build Release
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=ON \
            -DBUILD_JSON_SERIALIZATION=ON \
            -DBUILD_LEGACY_API=OFF \
            -DCMAKE_INSTALL_PREFIX=install-release
          cmake --build build -j "$(nproc)"
          make -C build test
          cmake --install build
          mkdir pip-wheel
          pip wheel --wheel-dir pip-wheel .

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
            name: install-release
            path: install-release/

      - name: Upload pip wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pip-wheel
          path: pip-wheel/

      - name: Build Debug
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_TESTS=ON \
            -DBUILD_JSON_SERIALIZATION=ON \
            -DBUILD_LEGACY_API=OFF \
            -DCMAKE_INSTALL_PREFIX=install-debug
          cmake --build build -j "$(nproc)"
          make -C build test
          cmake --install build

  build-macos:
    name: Build on macOS
    runs-on: macOS-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Release
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_LEGACY_API=OFF \
            -DBUILD_TESTS=OFF
          cmake --build build -j "$(sysctl -n hw.ncpu)"

      - name: Build Debug
        run: |
          cmake -B build -S . \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_LEGACY_API=OFF \
            -DBUILD_TESTS=OFF
          cmake --build build -j "$(sysctl -n hw.ncpu)"

  build-windows:
    name: Build on Windows
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat

      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            vcpkg_installed
            vcpkg/downloads
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('vcpkg.json') }}

      - name: Install vcpkg dependencies
        run: ${{ github.workspace }}\vcpkg\vcpkg install

      - name: Build Release
        run: |
          cmake -B build -S . \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake \
            -DBUILD_JSON_SERIALIZATION=ON \
            -DBUILD_PYTHON_BINDINGS=ON \
            -DBUILD_LEGACY_API=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS=OFF
          cmake --build build --config Release --target install -- /m:10
          mkdir pip-wheel
          pip wheel --wheel-dir pip-wheel ${{ github.workspace }}

      - name: Upload Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: build\install

      - name: Upload pip wheel Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pip-wheel
          path: pip-wheel/

      - name: Build Debug
        run: |
          cmake -B build -S . \
            -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake \
            -DBUILD_JSON_SERIALIZATION=ON \
            -DBUILD_PYTHON_BINDINGS=ON \
            -DBUILD_LEGACY_API=OFF \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_TESTS=OFF
          cmake --build build --config Debug --target install -- /m:10

